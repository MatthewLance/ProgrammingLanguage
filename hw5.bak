#lang racket
(provide (all-defined-out)) ;; exports the defined variables in this file.

;; definition of structures for MUPL programs - Do NOT change
(struct var  (string) #:transparent)  ;; a variable, e.g., (var "foo")
(struct int  (num)    #:transparent)  ;; a constant number, e.g., (int 17)
(struct add  (e1 e2)  #:transparent)  ;; add two expressions
(struct ifgreater (e1 e2 e3 e4)    #:transparent) ;; if e1 > e2 then e3 else e4
(struct fun  (nameopt formal body) #:transparent) ;; a recursive(?) 1-argument function
(struct call (funexp actual)       #:transparent) ;; function call
(struct mlet (var e body) #:transparent) ;; a local binding (let var = e in body) 
(struct apair (e1 e2)     #:transparent) ;; make a new pair
(struct fst  (e)    #:transparent) ;; get first part of a pair
(struct snd  (e)    #:transparent) ;; get second part of a pair
(struct aunit ()    #:transparent) ;; unit value -- good for ending a list
(struct isaunit (e) #:transparent) ;; evaluate to 1 if e is unit else 0

;; ========= Additional Assignment =========

(struct glet (var e body) #:transparent) ;; a global binding that overrides any local binding (let var = e in body)

(struct num-array  (size) #:transparent)  ;; a number array  (initialized to zeroes), e.g., (num-array-var 10)
                                                     ;; e.g. (num-array 4)

(struct num-array-at   (e1 e2) #:transparent) ;; e1 evaluates to num-array and e2 evaluates to racket int (index of the value to access) index starts from 0
                                              ;; (num-array-at (num-array 4) 3)
                                              ;; (num-array-at (num-array 4) 4) ;  this should give a nice error messaeg (like "array access out of bound")
                                              ;; (num-array-at (num-array 4) -1) ;  this should give a nice error messaeg (like "array access out of bound")

(struct num-array-set  (e1 e2 e3) #:transparent) ;; e1 evaluates to num-array-var, e2 evaluates to racket int (index of the value to access), and e3 evaluates to a MUPL int
                                              ;; (num-array-set (num-array 4) 0 (int 42))
                                              ;; (num-array-set (num-array 4) 5 (int 42)) ; this should give a nice error messaeg (like "array access out of bound")
                                              ;; (num-array-set (num-array 4) -1 (int 42)) ; this should give a nice error messaeg (like "array access out of bound")


;; a closure is not in "source" programs; it is what functions evaluate to
(struct closure (env fun) #:transparent) 


;; ========= Additional Assignment =========

(define (num-array-object? v) ;; hackish implementation of testing num-array object. We assume that if a value is mpair, it is a num-array object.
  (mpair? v))

(define (array-length array)
  (if (eq? (mcdr array) null)
      1
      (+ 1 (array-length (mcdr array)))))
(define (make-array-object length)  
    (if (= length 0)
        null
        (mcons (int 0) (make-array-object (- length 1)))))
(define (set-array-val array index val)
  (if (= index 0)
      (set-mcar! array val)
      (set-array-val (mcdr array) (- index 1) val)))


;; Problem 1

(define (rkl2mpl rks)
  (cond [(null? rks) (aunit)]
        [#t
         (apair (int (car rks)) (rkl2mpl (cdr rks)))]))

(define (mpl2rkl mps)
  (cond [(aunit? mps) null]
        [#t
         (cons (apair-e1 mps) (mpl2rkl (apair-e2 mps)))]))

;; CHANGE (put your solutions here)

;; Problem 2

;; lookup a variable in an environment
;; Do NOT change this function
(define (envlookup env str)
  (cond [(null? env) (error "unbound variable during evaluation" str)]
        [(equal? (car (car env)) str) (cdr (car env))]
        [#t (envlookup (cdr env) str)]))

;; Do NOT change the two cases given to you.  
;; DO add more cases for other kinds of MUPL expressions.
;; We will test eval-under-env by calling it directly even though
;; "in real life" it would be a helper function of eval-exp.
(define (eval-under-env e env)
  (cond [(var? e) 
         (envlookup env (var-string e))]
        [(add? e) 
         (let ([v1 (eval-under-env (add-e1 e) env)]
               [v2 (eval-under-env (add-e2 e) env)])
           (if (and (int? v1)
                    (int? v2))
               (int (+ (int-num v1) 
                       (int-num v2)))
               (error "MUPL addition applied to non-number")))]
        ;; CHANGE add more cases here
        [(int? e) e]
        [(ifgreater? e)
         (let ([v1 (eval-under-env (ifgreater-e1 e) env)]
               [v2 (eval-under-env (ifgreater-e2 e) env)])               
           (if (and (int? v1)
                    (int? v2))
               (if (> (int-num v1) 
                       (int-num v2))
                   (eval-under-env (ifgreater-e3 e) env)
                   (eval-under-env (ifgreater-e4 e) env))
               (error "MUPL comparison applied to non-number")))]
        ; Add variable in environmnet
        [(mlet? e)
         (let ([var1 (mlet-var e)]
               [val1 (eval-under-env (mlet-e e) env)])
               (eval-under-env (mlet-body e) (cons (cons var1 val1) env)))]
        [(apair? e)
         (let ([e1 (eval-under-env (apair-e1 e) env)]
               [e2 (eval-under-env (apair-e2 e) env)])
           (apair e1 e2)
           )]
        [(fst? e)
         (let ([pair (eval-under-env (fst-e e) env)])
           (if (apair? pair)
               (apair-e1 pair)
               (error "MUPL fst applied to non-apair" pair)))]
        [(snd? e)
         (let ([pair (eval-under-env (snd-e e) env)])
           (if (apair? pair)
               (apair-e2 pair)
               (error "MUPL fst applied to non-apair" pair)))]
        [(aunit? e) e]
        [(isaunit? e)
         (if (aunit? (eval-under-env (isaunit-e e) env))
             (int 1)
             (int 0))]
        [(fun? e) (closure env e)]
        [(closure? e) e]
        [(call? e)
         (let ([funexp (eval-under-env (call-funexp e) env)]
               [farg (eval-under-env (call-actual e) env)]
               )
           (if (closure? funexp)
               (let* ([func (closure-fun funexp)]
                      [fenv (closure-env funexp)]
                      [fname (fun-nameopt func)]
                      [fvar (fun-formal func)]
                      [fbody (fun-body func)]
                      [argpair (cons fvar farg)])
                 (if (equal? fname #f)
                     (eval-under-env fbody (cons argpair fenv))
                     (eval-under-env fbody (cons (cons fname funexp) (cons argpair fenv))))
               )
               (error "MUPL call applied to non-closure" funexp)))]
        
        ;; ========= Additional Assignment =========
        [(glet? e)
         (let ([var1 (glet-var e)]
               [val1 (eval-under-env (glet-e e) env)]
               [body1 (glet-body e)])
           (letrec
               ([bind (lambda(genv)
                         (if (null? genv)
                             '()
                             (let ([v1 (car genv)]
                                   [v2 (cdr genv)])
                               (cond [(closure? v2)
                                      (cons v1 (closure (bind(closure-env v2)) (closure-fun v2)))]
                                     [(pair? v1)
                                      (cons (bind v1) (bind v2))]
                                     [(string=? v1 var1)
                                      (cons v1 val1)]
                                     [#t (cons v1 (bind v2))]))))])

                (eval-under-env body1 (cons (cons var1 val1) (bind env)))))]
        [(num-array? e)
         (let ([sz (num-array-size e)])
           (if (< sz 0)
               (error "MULP num-array size cannot be negative value" e)
               (make-array-object sz)))]
        [(num-array-at? e)
         (let* ([num-arr (eval-under-env (num-array-at-e1 e) env)]
                [num-idx (num-array-at-e2 e)]
                [num-sz (if (num-array-object? num-arr) (array-length num-arr)
                            (error "MULP wrong num-array-object" num-arr))]) 
           (if (or (< num-idx 0) (<= num-sz num-idx))
               (error "MULP num-array-at array access out of bound" e)
               (letrec ([na-at (lambda (arr idx)
                                 (if (= idx 0)
                                     (mcar arr)
                                     (na-at (mcdr arr) (- idx 1))))])
                 (na-at num-arr num-idx))))]

        [(num-array-set? e)
         (let* ([num-arr (eval-under-env (num-array-set-e1 e) env)]
                [num-idx (num-array-set-e2 e)]
                [num-val (eval-under-env (num-array-set-e3 e) env)]
                [num-sz (if (num-array-object? num-arr) (array-length num-arr)
                            (error "MULP wrong num-array-object" num-arr))])
           (if (or (< num-idx 0) (<= num-sz num-idx))
               (error "MULP num-array-at array access out of bound" e)
               (begin
                 (set-array-val num-arr num-idx num-val)
                 num-val)))]
                       
        [#t (error (format "bad MUPL expression: ~v" e))]))

       
;; Do NOT change
(define (eval-exp e)
  (eval-under-env e null))



#| TEST CASE
(eval-exp (mlet "arr" (num-array 10) (apair (num-array-set (var "arr") 9 (int 42)) (num-array-at (var "arr") 9))))
(eval-exp (mlet "num-arr" (num-array 10) (num-array-at (var "num-arr") 9)))
(eval-exp (mlet "x" (int 1) (mlet "y" (int 2) (add (var "x") (var "y")))))

(define madd3 (fun "add3" "x" (add (var "x") (int 3))))

(eval-exp (call (fun #f "x" (add (var "x") (int 3))) (int 4)))

(eval-exp (mlet "add42" (fun #f "x" (add (var "x") (int 3))) (call (var "add42") (int 42))))

(eval-exp
 (mlet "x" (int 42)
       (mlet "fun_a"
             (fun "funname" "arg1"
                  (add (var "x") (var "arg1")))
 ; mlet for var “fun_a” completed 
             (glet "x" (int 10)
                   (call (var "fun_a") (int 1))))))


(eval-exp
 (glet "x" (int 42)
       (mlet "fun_a"
             (fun "funname" "arg1"
                  (add (var "x") (var "arg1")))
 ; mlet for var “fun_a” completed 
             (glet "x" (int 10)
                   (call (var "fun_a") (int 1))))))

(eval-exp
 (glet "x" (int 42)
       (mlet "fun_a"
             (fun "funname" "arg1"
                  (add (var "x") (var "arg1")))
 ; mlet for var “fun_a” completed 
             (mlet "x" (int 10)
                   (call (var "fun_a") (int 1))))))
|#

;; Problem 3

(define (ifaunit e1 e2 e3)
  (ifgreater (isaunit e1) (int 0) e2 e3))

(define (mlet* lstlst e2)
  (if (null? lstlst)
      e2
      (mlet (caar lstlst) (cdar lstlst) (mlet* (cdr lstlst e2)))))

(define (ifeq e1 e2 e3 e4)
  (mlet*
   (list (cons ((var "_x") e1) ((var "_y") e2)))
   (ifgreater (var "_x") (var "_y") e4
              (ifgreater (var "_y") (var "_x") e4 e3))
  ))

;; Problem 4

(define mupl-map
  (fun #f "f"
       (fun "apply" "lst"
            (ifgreater (isaunit (var "lst")) (int 0)
                       (aunit)
                       (apair (call (var "f") (fst (var "lst"))) (call (var "apply") (snd (var "lst"))))))))

(define mupl-mapAddN
  (mlet "map" mupl-map
        (fun #f "I"
             (call (var "map") (fun #f "x" (add (var "x") (var "I")))))))

(struct fun-challenge (nameopt formal body freevars) #:transparent) ;; a recursive(?) 1-argument function

;; We will test this function directly, so it must do
;; as described in the assignment
(define (compute-free-vars e) "CHANGE")

;; Do NOT share code with eval-under-env because that will make grading
;; more difficult, so copy most of your interpreter here and make minor changes
(define (eval-under-env-c e env) "CHANGE")

;; Do NOT change this
(define (eval-exp-c e)
  (eval-under-env-c (compute-free-vars e) null))


